// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w8Roqs5CeKXUVajBnjnyHA
// Component: hunnRfsfkdfB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import TextInput from "../../TextInput"; // plasmic-import: _yahxnQi1d3a/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: w8Roqs5CeKXUVajBnjnyHA/projectcss
import sty from "./PlasmicFactor.module.css"; // plasmic-import: hunnRfsfkdfB/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: PgjN1jR1k265/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: KCw0ExuGEz0B/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: I5AceigUynU8/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicFactor__VariantMembers = {};
export type PlasmicFactor__VariantsArgs = {};
type VariantPropType = keyof PlasmicFactor__VariantsArgs;
export const PlasmicFactor__VariantProps = new Array<VariantPropType>();

export type PlasmicFactor__ArgsType = {
  params?: any;
};
type ArgPropType = keyof PlasmicFactor__ArgsType;
export const PlasmicFactor__ArgProps = new Array<ArgPropType>("params");

export type PlasmicFactor__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
  accordion?: Flex__<typeof AntdAccordion>;
  دتخفف?: Flex__<typeof TextInput>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultFactorProps {
  params?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFactor__RenderFunc(props: {
  variants: PlasmicFactor__VariantsArgs;
  args: PlasmicFactor__ArgsType;
  overrides: PlasmicFactor__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          params: { book_id: "faee2fd2-5aa6-11ef-85d7-005056ad823b" }
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "دتخفف.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
    >
      <div className={classNames(projectcss.all, sty.freeBox__biNSb)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__sgwSz)}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__pYoEx)}
            dir={"rtl"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xLxcF
              )}
            >
              {
                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
              }
            </div>
            <DataFetcher
              className={classNames(
                "__wab_instance",
                sty.httpRestApiFetcher__ysfNa
              )}
              dataName={"consultInvoiceDetails"}
              errorDisplay={
                <DataCtxReader__>
                  {$ctx => "Error fetching data"}
                </DataCtxReader__>
              }
              errorName={"fetchError"}
              headers={{
                "Content-Type": "application/json",
                Accept: "application/json"
              }}
              loadingDisplay={
                <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
              }
              method={"GET"}
              noLayout={false}
              url={(() => {
                try {
                  return `https://apigw.paziresh24.com/api/consultInvoiceDetails?book_id=${$props.params.book_id}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rpYMf)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gRkc)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mv02
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bZcZc
                          )}
                        >
                          {
                            "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646:"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2DQp4
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  (
                                    $ctx.consultInvoiceDetails.result
                                      .service_price / 10
                                  )
                                    .toString()
                                    .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                  " تومان"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "100.000 \u0647\u0632\u0627\u0631\u062a\u0648\u0645\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6BnxU
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qx0Y7
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tqOA
                          )}
                        >
                          {"\u0645\u0627\u0644\u06cc\u0627\u062a:"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__j8Ay
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  ($ctx.consultInvoiceDetails.result.vat / 10)
                                    .toString()
                                    .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                  " تومان"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "3.000 \u0647\u0632\u0627\u0631\u062a\u0648\u0645\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__n78CN)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rnUWe
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__neTS
                          )}
                        >
                          {
                            "\u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a: "
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vsHlo
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  (
                                    $ctx.consultInvoiceDetails.result
                                      .book_price / 10
                                  )
                                    .toString()
                                    .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                  " تومان"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "103.000 \u0647\u0632\u0627\u0631\u062a\u0648\u0645\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </DataCtxReader__>
            </DataFetcher>
            <div className={classNames(projectcss.all, sty.freeBox__rO4B8)}>
              <div className={classNames(projectcss.all, sty.freeBox__w5Qrk)}>
                <IconIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__btPak
                  )}
                >
                  {
                    "\u0636\u0645\u0627\u0646\u062a %100 \u0628\u0627\u0632\u06af\u0634\u062a \u0648\u062c\u0647 \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u0627\u0631\u0636\u0627\u06cc\u062a\u06cc"
                  }
                </div>
              </div>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__lse8)}
            dir={"rtl"}
          >
            {(() => {
              const child$Props = {
                activeKey: generateStateValueProp($state, [
                  "accordion",
                  "activePanelId"
                ]),
                bordered: true,
                className: classNames("__wab_instance", sty.accordion),
                destroyInactivePanel: false,
                expandIconPosition: "end",
                items: (
                  <React.Fragment>
                    <AntdAccordionItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionItem___948E
                      )}
                      id={1}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uE1QS
                          )}
                        >
                          {"\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641"}
                        </div>
                      }
                      showArrow={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wAdIi
                        )}
                      >
                        <TextInput
                          data-plasmic-name={"\u062f\u062a\u062e\u0641\u0641"}
                          data-plasmic-override={overrides.دتخفف}
                          className={classNames("__wab_instance", sty.دتخفف)}
                          onChange={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "دتخفف",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          placeholder={
                            "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f ..."
                          }
                          value={
                            generateStateValueProp($state, [
                              "دتخفف",
                              "value"
                            ]) ?? ""
                          }
                        />

                        <Button
                          children2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__y5Taj
                              )}
                            >
                              {"\u0627\u0639\u0645\u0627\u0644"}
                            </div>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.button__sqeUd
                          )}
                        />
                      </div>
                    </AntdAccordionItem>
                    <AntdAccordionItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionItem__a7BnV
                      )}
                      id={2}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0EAs1
                          )}
                        >
                          {"Second Item"}
                        </div>
                      }
                      showArrow={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___61R1
                        )}
                      >
                        {"Second Children"}
                      </div>
                    </AntdAccordionItem>
                  </React.Fragment>
                ),
                onChange: generateStateOnChangePropForCodeComponents(
                  $state,
                  "activePanelId",
                  ["accordion", "activePanelId"],
                  AntdAccordion_Helpers
                ),
                size: "large"
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "activePanelId",
                    plasmicStateName: "accordion.activePanelId"
                  }
                ],
                [],
                AntdAccordion_Helpers ?? {},
                child$Props
              );

              return (
                <AntdAccordion
                  data-plasmic-name={"accordion"}
                  data-plasmic-override={overrides.accordion}
                  {...child$Props}
                />
              );
            })()}
          </div>
          <Button
            children2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wyUjh
                )}
              >
                {
                  "\u067e\u0631\u062f\u0627\u062e\u062a \u0648 \u0622\u063a\u0627\u0632 \u06af\u0641\u062a\u06af\u0648 \u0628\u0627 \u067e\u0632\u0634\u06a9"
                }
              </div>
            }
            className={classNames("__wab_instance", sty.button___5DDSy)}
          />
        </Stack__>
        <div className={classNames(projectcss.all, sty.freeBox__vSpCi)}>
          <DataFetcher
            body={(() => {
              try {
                return {
                  book_id: $props.params.book_id,
                  type: "factor"
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {};
                }
                throw e;
              }
            })()}
            className={classNames(
              "__wab_instance",
              sty.httpRestApiFetcher___3UQKo
            )}
            dataName={"getBooks"}
            errorDisplay={
              <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
            }
            errorName={"fetchError"}
            headers={(() => {
              try {
                return {
                  "Content-Type": "multipart/form-data",
                  Accept: "application/json",
                  cookie:
                    "ajs_anonymous_id=5d1ec34c-9c66-405f-98fd-67234a283b2e; terminal_id=clinic-6694bf21125863.75090179; terminal_id=clinic-6694bf21667240.25778251; experimentation_subject_id=IjFlNjRjYzllLTYyMzQtNGVkMC1hNWJjLTJjMjI5Nzc4OTdhMCI%3D--2bb41e9ad77b2a5ff46b76e060394e92a98e3588; ajs_user_id=74ef4da5291c403aae421c9abb46e2a3fdd832d0ea93445db369684afcf529c0; intercom-device-id-y10e7138=5768079c-543e-4502-b55c-50a276f6d57e; _hjSessionUser_2647459=eyJpZCI6ImU2NDY0NDE4LTM5NjctNWQ3Zi1iNDdlLWFiMzBhY2IyN2I0YiIsImNyZWF0ZWQiOjE3MjE2NTE2MzExNzcsImV4aXN0aW5nIjp0cnVlfQ==; _ga_DCR3WHVPT0=deleted; _ym_uid=1722237467417652911; _ym_d=1722237467; ph_phc_I6LQOR1bk7d3I0rHcHpeMVxxYIIH4yQVVGS7PNLtIoe_posthog=%7B%22distinct_id%22%3A%22018fc484-49da-7720-8e30-574662eb3bab%22%2C%22%24sesid%22%3A%5B1722241513886%2C%220190fd97-f8fb-7b6e-b6fe-cda5e11084fd%22%2C1722241513723%5D%7D; _gid=GA1.2.1429457909.1723632361; _clck=1cbzwgi%7C2%7Cfoc%7C0%7C1656; P24SESSION=n6hvt3ga992ojrtfmvb53okcbt; token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3AyNGRvY3RvcnMuZGFya3ViZS5hcHAvVjEvYXV0aC9sb2dpbiIsImlhdCI6MTcyMzcxNjM4MCwiZXhwIjoxNzMxNDkyMzgwLCJuYmYiOjE3MjM3MTYzODAsImp0aSI6IkdKS3NkR3RiT2JVald5OUsiLCJzdWIiOiIyMDkyMzc4IiwibmFtZSI6Iti32KfZh9inIiwiZmFtaWx5Ijoi2LLYp9ix2LnbjNin2YYiLCJnZW5kZXIiOiJtYWxlIiwicm9sZSI6InVzZXIiLCJrZXkiOiJ1c2VyLWtleSIsIngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsicHJvdmlkZXIiLCJjb25zdW1lciIsInVzZXIiXSwieC1oYXN1cmEtcHJvdmlkZXItaWQiOiIxNzIwMzE4In0.KRb1xeO9Q_HrvteDG7nyZSobhwd6g_B9EoW1kuGuIGA; user_type=doctor; certificate=%242y%2410%24hCP0PmhsOc7G.LjLHSJJu.KHH%2FxdnWbqJ%2FxQIMJHpq%2FM1NAlFl6uC; _clsk=1k450gf%7C1723719714521%7C1%7C0%7Cw.clarity.ms%2Fcollect; _ga=GA1.2.462751737.1720970202; _ga_DCR3WHVPT0=GS1.1.1723722582.79.0.1723723625.60.0.0",
                  test: "123"
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {};
                }
                throw e;
              }
            })()}
            loadingDisplay={
              <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
            }
            method={"POST"}
            noLayout={false}
            previewErrorDisplay={false}
            url={"https://apigw.paziresh24.com/booking/getBooks"}
          >
            <DataCtxReader__>
              {$ctx => (
                <div className={classNames(projectcss.all, sty.freeBox__tk0JB)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__w84Dp)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"70px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"70px"}
                      height={``}
                      loading={"lazy"}
                      src={
                        "https://cdn.paziresh24.com/getImage/p24/search-women/noimage.png"
                      }
                      width={``}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___01Aw7
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oS19K
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cwNfd
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.getBooks.status;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0641\u0631\u062d \u0646\u0627\u0632 \u0631\u0634\u06cc\u062f\u06cc\r";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sHt0E
                          )}
                        >
                          {
                            "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kB1Vr
                        )}
                      >
                        {
                          "\u062f\u0631\u0645\u0627\u0646 \u0628\u06cc\u0645\u0627\u0631\u06cc\u200c\u0647\u0627\u06cc \u0632\u0646\u0627\u0646\u060c\u0645\u0634\u0627\u0648\u0631\u0647 \u0628\u06cc\u0645\u0627\u0631\u06cc\u200c\u0647\u0627\u06cc \u062c\u0646\u0633\u06cc \u0648\u062f\u0631\u0645\u0627\u0646 \u0622\u0646 \u060c \u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631 \u062e\u0635\u0648\u0635 \u0632\u0645\u0627\u0646 \u0648 \u0646\u062d\u0648\u0647 \u0645\u0635\u0631\u0641 \u0642\u0631\u0635 \u0647\u0627\u06cc \u0627\u0648\u0698\u0627\u0646\u0633\u06cc \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u0627\u0632 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc\u060c \u062a\u0639\u06cc\u06cc\u0646 \u062c\u0646\u0633\u06cc\u062a \u060c \u0627\u0646\u062c\u0627\u0645 \u067e\u0627\u067e \u0627\u0633\u0645\u06cc\u0631 \u0648 \u0622\u0632\u0645\u0627\u06cc\u0634 \u0627\u0686 \u067e\u06cc \u0648\u06cc\u060c\u0635\u062f\u0648\u0631\u06a9 \u0648 ..."
                        }
                      </div>
                    </Stack__>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hjnUu
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0633\u0644\u0627\u0645. \u0645\u0646 \u062f\u06a9\u062a\u0631 \u0641\u0631\u062d \u0646\u0627\u0632 \u0631\u0634\u06cc\u062f\u06cc \u0647\u0633\u062a\u0645.\n\u067e\u0633 \u0627\u0632 \u0646\u0647\u0627\u06cc\u06cc \u0634\u062f\u0646 \u0646\u0648\u0628\u062a\u060c "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#3861FB" }}
                      >
                        {
                          "\u0627\u0645\u0631\u0648\u0632 \u0633\u0627\u0639\u062a 13:40\u060c \u0627\u0632 \u0637\u0631\u06cc\u0642 \u0627\u06cc\u062a\u0627"
                        }
                      </span>
                      <React.Fragment>
                        {
                          " \u0634\u0645\u0627 \u0631\u0627 \u0648\u06cc\u0632\u06cc\u062a \u062e\u0648\u0627\u0647\u0645 \u06a9\u0631\u062f."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
              )}
            </DataCtxReader__>
          </DataFetcher>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "accordion", "\u062f\u062a\u062e\u0641\u0641", "img"],
  svg: ["svg"],
  accordion: ["accordion", "\u062f\u062a\u062e\u0641\u0641"],
  دتخفف: ["\u062f\u062a\u062e\u0641\u0641"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  accordion: typeof AntdAccordion;
  دتخفف: typeof TextInput;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFactor__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFactor__VariantsArgs;
    args?: PlasmicFactor__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFactor__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFactor__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFactor__ArgProps,
          internalVariantPropNames: PlasmicFactor__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFactor__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFactor";
  } else {
    func.displayName = `PlasmicFactor.${nodeName}`;
  }
  return func;
}

export const PlasmicFactor = Object.assign(
  // Top-level PlasmicFactor renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    accordion: makeNodeComponent("accordion"),
    دتخفف: makeNodeComponent("\u062f\u062a\u062e\u0641\u0641"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicFactor
    internalVariantProps: PlasmicFactor__VariantProps,
    internalArgProps: PlasmicFactor__ArgProps
  }
);

export default PlasmicFactor;
/* prettier-ignore-end */

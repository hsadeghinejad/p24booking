// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w8Roqs5CeKXUVajBnjnyHA
// Component: vitBSaUD2KOG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: 9xgScCI5_Ujn/codeComponent
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import TextInput from "../../TextInput"; // plasmic-import: _yahxnQi1d3a/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: w8Roqs5CeKXUVajBnjnyHA/projectcss
import sty from "./PlasmicFactor.module.css"; // plasmic-import: vitBSaUD2KOG/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: iQMfo1a3dZrA/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: PgjN1jR1k265/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: KCw0ExuGEz0B/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: I5AceigUynU8/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicFactor__VariantMembers = {};
export type PlasmicFactor__VariantsArgs = {};
type VariantPropType = keyof PlasmicFactor__VariantsArgs;
export const PlasmicFactor__VariantProps = new Array<VariantPropType>();

export type PlasmicFactor__ArgsType = {};
type ArgPropType = keyof PlasmicFactor__ArgsType;
export const PlasmicFactor__ArgProps = new Array<ArgPropType>();

export type PlasmicFactor__OverridesType = {
  root?: Flex__<"div">;
  consultInvoiceDetails?: Flex__<typeof ApiRequest>;
  accordion?: Flex__<typeof AntdAccordion>;
  دتخفف?: Flex__<typeof TextInput>;
  getBooks?: Flex__<typeof ApiRequest>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultFactorProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFactor__RenderFunc(props: {
  variants: PlasmicFactor__VariantsArgs;
  args: PlasmicFactor__ArgsType;
  overrides: PlasmicFactor__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "consultInvoiceDetails.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "consultInvoiceDetails.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "consultInvoiceDetails.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "دتخفف.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "getBooks.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getBooks.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getBooks.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicFactor.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicFactor.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicFactor.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox___0HVqn)}
            dir={"rtl"}
          >
            <div className={classNames(projectcss.all, sty.freeBox___9EXcY)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nJvGq)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__l3D5H)}
                  dir={"rtl"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vpZg3
                    )}
                  >
                    {
                      "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                    }
                  </div>
                  <ApiRequest
                    data-plasmic-name={"consultInvoiceDetails"}
                    data-plasmic-override={overrides.consultInvoiceDetails}
                    className={classNames(
                      "__wab_instance",
                      sty.consultInvoiceDetails
                    )}
                    errorDisplay={
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__m1T7J
                        )}
                      >
                        <Icon2Icon
                          className={classNames(projectcss.all, sty.svg__sJnjK)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__u2Wyt
                          )}
                        >
                          {
                            "\u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u062e\u0637\u0627 \u0645\u0648\u0627\u062c\u0647 \u0634\u062f!"
                          }
                        </div>
                      </Stack__>
                    }
                    loadingDisplay={
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8IKdk
                        )}
                      >
                        <Icon2Icon
                          className={classNames(projectcss.all, sty.svg__fLdF)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0Rjd
                          )}
                        >
                          {
                            "\u062f\u0631 \u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a ..."
                          }
                        </div>
                      </Stack__>
                    }
                    method={"GET"}
                    onError={generateStateOnChangeProp($state, [
                      "consultInvoiceDetails",
                      "error"
                    ])}
                    onLoading={generateStateOnChangeProp($state, [
                      "consultInvoiceDetails",
                      "loading"
                    ])}
                    onSuccess={generateStateOnChangeProp($state, [
                      "consultInvoiceDetails",
                      "data"
                    ])}
                    url={(() => {
                      try {
                        return `https://apigw.paziresh24.com/api/consultInvoiceDetails?book_id=${$ctx.params.book_id}`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__eEt0R)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__p7UQ8
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zLn2W
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dqiUc
                            )}
                          >
                            {
                              "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646:"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__stFce
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    (
                                      $state.consultInvoiceDetails.data.result
                                        .service_price / 10
                                    )
                                      .toString()
                                      .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                    " تومان"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "-";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2YxWz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gpnfY
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iufFm
                            )}
                          >
                            {"\u0645\u0627\u0644\u06cc\u0627\u062a:"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8USsm
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    (
                                      $state.consultInvoiceDetails.data.result
                                        .vat / 10
                                    )
                                      .toString()
                                      .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                    " تومان"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "-";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zpxjm
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sBOnP
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nlPCy
                            )}
                          >
                            {
                              "\u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a: "
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hxZdH
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    (
                                      $state.consultInvoiceDetails.data.result
                                        .book_price / 10
                                    )
                                      .toString()
                                      .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                    " تومان"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "-";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    </div>
                  </ApiRequest>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__h4RQm)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6Et52
                      )}
                    >
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___7GQyM)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oXPvR
                        )}
                      >
                        {
                          "\u0636\u0645\u0627\u0646\u062a %100 \u0628\u0627\u0632\u06af\u0634\u062a \u0648\u062c\u0647 \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u0627\u0631\u0636\u0627\u06cc\u062a\u06cc"
                        }
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___4Oq46)}
                  dir={"rtl"}
                >
                  {(() => {
                    const child$Props = {
                      activeKey: generateStateValueProp($state, [
                        "accordion",
                        "activePanelId"
                      ]),
                      bordered: true,
                      className: classNames("__wab_instance", sty.accordion),
                      destroyInactivePanel: false,
                      expandIconPosition: "end",
                      items: (
                        <React.Fragment>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem___0D2Rh
                            )}
                            id={1}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__meZkp
                                )}
                              >
                                {"\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641"}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___1SJob
                              )}
                            >
                              <TextInput
                                data-plasmic-name={
                                  "\u062f\u062a\u062e\u0641\u0641"
                                }
                                data-plasmic-override={overrides.دتخفف}
                                className={classNames(
                                  "__wab_instance",
                                  sty.دتخفف
                                )}
                                onChange={(...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "دتخفف",
                                    "value"
                                  ])(
                                    (e => e.target?.value).apply(
                                      null,
                                      eventArgs
                                    )
                                  );
                                }}
                                placeholder={
                                  "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f ..."
                                }
                                value={
                                  generateStateValueProp($state, [
                                    "دتخفف",
                                    "value"
                                  ]) ?? ""
                                }
                              />

                              <Button
                                children2={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___4Htf
                                    )}
                                  >
                                    {"\u0627\u0639\u0645\u0627\u0644"}
                                  </div>
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__hyD7Y
                                )}
                              />
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__uDaR
                            )}
                            id={2}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__g1Meb
                                )}
                              >
                                {"Second Item"}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__d9Tol
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                        </React.Fragment>
                      ),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "activePanelId",
                        ["accordion", "activePanelId"],
                        AntdAccordion_Helpers
                      ),
                      size: "large"
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "activePanelId",
                          plasmicStateName: "accordion.activePanelId"
                        }
                      ],
                      [],
                      AntdAccordion_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdAccordion
                        data-plasmic-name={"accordion"}
                        data-plasmic-override={overrides.accordion}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
                <Button
                  children2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__h6Vub
                      )}
                    >
                      {
                        "\u067e\u0631\u062f\u0627\u062e\u062a \u0648 \u0622\u063a\u0627\u0632 \u06af\u0641\u062a\u06af\u0648 \u0628\u0627 \u067e\u0632\u0634\u06a9"
                      }
                    </div>
                  }
                  className={classNames("__wab_instance", sty.button__lRwjT)}
                />
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__g0Crk)}>
                <ApiRequest
                  data-plasmic-name={"getBooks"}
                  data-plasmic-override={overrides.getBooks}
                  body={(() => {
                    try {
                      return {
                        book_id: $ctx.params.book_id,
                        type: "factor"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.getBooks)}
                  errorDisplay={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__qxTsw)}
                    >
                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg___2GkUj)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__g1EDm
                        )}
                      >
                        {
                          "\u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u062e\u0637\u0627 \u0645\u0648\u0627\u062c\u0647 \u0634\u062f!"
                        }
                      </div>
                    </Stack__>
                  }
                  loadingDisplay={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__x8YkE)}
                    >
                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__pnTbF)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aG7Rb
                        )}
                      >
                        {
                          "\u062f\u0631 \u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a ..."
                        }
                      </div>
                    </Stack__>
                  }
                  method={"POST"}
                  onError={generateStateOnChangeProp($state, [
                    "getBooks",
                    "error"
                  ])}
                  onLoading={generateStateOnChangeProp($state, [
                    "getBooks",
                    "loading"
                  ])}
                  onSuccess={generateStateOnChangeProp($state, [
                    "getBooks",
                    "data"
                  ])}
                  url={"https://apigw.paziresh24.com/booking/getBooks"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ylpd)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pNjAk)}
                    >
                      <PlasmicImg__
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"70px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"70px"}
                        height={``}
                        loading={"lazy"}
                        src={
                          "https://cdn.paziresh24.com/getImage/p24/search-women/noimage.png"
                        }
                        width={``}
                      />

                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wn4SZ
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eKnJa
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___04LL
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    $state.getBooks.data.result[0].doctor_name +
                                    " " +
                                    $state.getBooks.data.result[0].doctor_family
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "-";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ptr9Z
                            )}
                          >
                            {
                              "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646"
                            }
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__w4DnZ
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.getBooks.data.result[0]
                                  .expertises[0].alias_title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u062f\u0631\u0645\u0627\u0646 \u0628\u06cc\u0645\u0627\u0631\u06cc\u200c\u0647\u0627\u06cc \u0632\u0646\u0627\u0646\u060c\u0645\u0634\u0627\u0648\u0631\u0647 \u0628\u06cc\u0645\u0627\u0631\u06cc\u200c\u0647\u0627\u06cc \u062c\u0646\u0633\u06cc \u0648\u062f\u0631\u0645\u0627\u0646 \u0622\u0646 \u060c \u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631 \u062e\u0635\u0648\u0635 \u0632\u0645\u0627\u0646 \u0648 \u0646\u062d\u0648\u0647 \u0645\u0635\u0631\u0641 \u0642\u0631\u0635 \u0647\u0627\u06cc \u0627\u0648\u0698\u0627\u0646\u0633\u06cc \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u0627\u0632 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc\u060c \u062a\u0639\u06cc\u06cc\u0646 \u062c\u0646\u0633\u06cc\u062a \u060c \u0627\u0646\u062c\u0627\u0645 \u067e\u0627\u067e \u0627\u0633\u0645\u06cc\u0631 \u0648 \u0622\u0632\u0645\u0627\u06cc\u0634 \u0627\u0686 \u067e\u06cc \u0648\u06cc\u060c\u0635\u062f\u0648\u0631\u06a9 \u0648 ...";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kVey
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u0633\u0644\u0627\u0645. \u0645\u0646 \u062f\u06a9\u062a\u0631 "
                          }
                        </React.Fragment>
                        {
                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span__da6Z
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    $state.getBooks.data.result[0].doctor_name +
                                    " " +
                                    $state.getBooks.data.result[0].doctor_family
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "-";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </span>
                        }
                        <React.Fragment>
                          {
                            " \u0647\u0633\u062a\u0645.\n\u067e\u0633 \u0627\u0632 \u0646\u0647\u0627\u06cc\u06cc \u0634\u062f\u0646 \u0646\u0648\u0628\u062a\u060c "
                          }
                        </React.Fragment>
                        {
                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span___4REPo
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    const bookFromTimestamp =
                                      $state.getBooks.data.result[0].book_from *
                                      1000;
                                    const now = Date.now();
                                    const daysDifference = Math.ceil(
                                      (bookFromTimestamp - now) /
                                        (1000 * 60 * 60 * 24)
                                    );
                                    const relativeTimeFormatter =
                                      new Intl.RelativeTimeFormat("fa", {
                                        numeric: "auto"
                                      });
                                    let relativeDay =
                                      relativeTimeFormatter.format(
                                        daysDifference,
                                        "day"
                                      );
                                    const timeFormatter =
                                      new Intl.DateTimeFormat("fa", {
                                        hour: "2-digit",
                                        minute: "2-digit",
                                        hour12: false
                                      });
                                    const time =
                                      timeFormatter.format(bookFromTimestamp);
                                    const at = `${relativeDay} ساعت ${time}،`;
                                    const with_platform =
                                      $state.getBooks.data.result[0].book_params
                                        .online_channel == "eitaa"
                                        ? " از طریق ایتا "
                                        : " از طریق واتس آپ ";
                                    return at + with_platform;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </span>
                        }
                        <React.Fragment>
                          {
                            "\u0634\u0645\u0627 \u0631\u0627 \u0648\u06cc\u0632\u06cc\u062a \u062e\u0648\u0627\u0647\u0645 \u06a9\u0631\u062f."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                </ApiRequest>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "consultInvoiceDetails",
    "accordion",
    "\u062f\u062a\u062e\u0641\u0641",
    "getBooks",
    "img"
  ],
  consultInvoiceDetails: ["consultInvoiceDetails"],
  accordion: ["accordion", "\u062f\u062a\u062e\u0641\u0641"],
  دتخفف: ["\u062f\u062a\u062e\u0641\u0641"],
  getBooks: ["getBooks", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  consultInvoiceDetails: typeof ApiRequest;
  accordion: typeof AntdAccordion;
  دتخفف: typeof TextInput;
  getBooks: typeof ApiRequest;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFactor__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFactor__VariantsArgs;
    args?: PlasmicFactor__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFactor__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFactor__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFactor__ArgProps,
          internalVariantPropNames: PlasmicFactor__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFactor__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFactor";
  } else {
    func.displayName = `PlasmicFactor.${nodeName}`;
  }
  return func;
}

export const PlasmicFactor = Object.assign(
  // Top-level PlasmicFactor renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    consultInvoiceDetails: makeNodeComponent("consultInvoiceDetails"),
    accordion: makeNodeComponent("accordion"),
    دتخفف: makeNodeComponent("\u062f\u062a\u062e\u0641\u0641"),
    getBooks: makeNodeComponent("getBooks"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicFactor
    internalVariantProps: PlasmicFactor__VariantProps,
    internalArgProps: PlasmicFactor__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "فاکتور نوبت",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFactor;
/* prettier-ignore-end */

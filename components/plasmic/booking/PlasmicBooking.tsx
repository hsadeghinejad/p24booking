// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w8Roqs5CeKXUVajBnjnyHA
// Component: a2O4w__PND9a

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: 9xgScCI5_Ujn/codeComponent
import { AntdRate } from "@plasmicpkgs/antd5/skinny/registerRate";
import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import TextInput from "../../TextInput"; // plasmic-import: _yahxnQi1d3a/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: w8Roqs5CeKXUVajBnjnyHA/projectcss
import sty from "./PlasmicBooking.module.css"; // plasmic-import: a2O4w__PND9a/css

import EitaaIcon from "../fragment_icons/icons/PlasmicIcon__Eitaa"; // plasmic-import: qxWwW7vbw7na/icon
import WhatsappIcon from "../fragment_icons/icons/PlasmicIcon__Whatsapp"; // plasmic-import: oob3UzcKBsd_/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: QUC8EUW8HzWa/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: KCw0ExuGEz0B/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: I5AceigUynU8/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: iQMfo1a3dZrA/icon

createPlasmicElementProxy;

export type PlasmicBooking__VariantMembers = {};
export type PlasmicBooking__VariantsArgs = {};
type VariantPropType = keyof PlasmicBooking__VariantsArgs;
export const PlasmicBooking__VariantProps = new Array<VariantPropType>();

export type PlasmicBooking__ArgsType = {};
type ArgPropType = keyof PlasmicBooking__ArgsType;
export const PlasmicBooking__ArgProps = new Array<ArgPropType>();

export type PlasmicBooking__OverridesType = {
  root?: Flex__<"div">;
  timer?: Flex__<typeof Timer>;
  sideEffect?: Flex__<typeof SideEffect>;
  rateApi?: Flex__<typeof ApiRequest>;
  rate2?: Flex__<typeof AntdRate>;
  accordion?: Flex__<typeof AntdAccordion>;
  txtDiscount?: Flex__<typeof TextInput>;
  paymentLoader?: Flex__<"div">;
};

export interface DefaultBookingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBooking__RenderFunc(props: {
  variants: PlasmicBooking__VariantsArgs;
  args: PlasmicBooking__ArgsType;
  overrides: PlasmicBooking__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "rateApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rateApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rateApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return Number(
                (
                  ($state.rateApi.data.list[0].doctor_encounter +
                    $state.rateApi.data.list[0].explanation_of_issue +
                    $state.rateApi.data.list[0].quality_of_treatment) /
                  3
                ).toFixed(1)
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "doctorScore",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "stateFullprofile",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "stateConsultInvoiceDetails",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "showBookingLoader",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "txtDiscount.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "stateBook",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "stateServiceCost",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "stateVatCost",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "stateDiscountCost",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "stateBookCost",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "stateDiscountToken",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "showPaymentLoader",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "stateBookingProgress",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "timerIsRun",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(() => {
          try {
            return !!$ctx.query.center_id;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_fragment_design_system_css.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              sty.root
            )}
            di={undefined}
            dir={``}
          >
            <Timer
              data-plasmic-name={"timer"}
              data-plasmic-override={overrides.timer}
              className={classNames("__wab_instance", sty.timer)}
              intervalSeconds={0.3}
              isRunning={(() => {
                try {
                  return $state.timerIsRun;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              onTick={async () => {
                const $steps = {};

                $steps["updateStateBookingProgress"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["stateBookingProgress"]
                        },
                        operation: 2,
                        value: $state.stateBookingProgress + 5
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, oldValue + 1);
                        return oldValue + 1;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateBookingProgress"] != null &&
                  typeof $steps["updateStateBookingProgress"] === "object" &&
                  typeof $steps["updateStateBookingProgress"].then ===
                    "function"
                ) {
                  $steps["updateStateBookingProgress"] = await $steps[
                    "updateStateBookingProgress"
                  ];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if ($state.stateBookingProgress == 100)
                              return ($state.timerIsRun = false);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              runWhileEditing={true}
            />

            <SideEffect
              data-plasmic-name={"sideEffect"}
              data-plasmic-override={overrides.sideEffect}
              className={classNames("__wab_instance", sty.sideEffect)}
              onMount={async () => {
                const $steps = {};

                $steps["apiFullprofile"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          (() => {
                            try {
                              return (
                                "https://api.paziresh24.com/doctor/v1/full-profile/" +
                                $ctx.params.slug
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apiFullprofile"] != null &&
                  typeof $steps["apiFullprofile"] === "object" &&
                  typeof $steps["apiFullprofile"].then === "function"
                ) {
                  $steps["apiFullprofile"] = await $steps["apiFullprofile"];
                }

                $steps["setStateFullprofile"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["stateFullprofile"]
                        },
                        operation: 0,
                        value: $steps.apiFullprofile.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["setStateFullprofile"] != null &&
                  typeof $steps["setStateFullprofile"] === "object" &&
                  typeof $steps["setStateFullprofile"].then === "function"
                ) {
                  $steps["setStateFullprofile"] = await $steps[
                    "setStateFullprofile"
                  ];
                }

                $steps["apiMe"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://apigw.paziresh24.com/v1/auth/me"
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["apiMe"] != null &&
                  typeof $steps["apiMe"] === "object" &&
                  typeof $steps["apiMe"].then === "function"
                ) {
                  $steps["apiMe"] = await $steps["apiMe"];
                }

                $steps["apiFreeturn"] =
                  $state.stateFullprofile.status == "SUCCESS"
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://apigw.paziresh24.com/booking/v2/getFreeTurn",
                            undefined,
                            (() => {
                              try {
                                return {
                                  center_id: $ctx.query.center_id,
                                  service_id: $ctx.query.service_id,
                                  user_center_id:
                                    $state.stateFullprofile.data.centers.find(
                                      item => item.id === $ctx.query.center_id
                                    )?.user_center_id,
                                  type: "web",
                                  terminal_id: ""
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["apiFreeturn"] != null &&
                  typeof $steps["apiFreeturn"] === "object" &&
                  typeof $steps["apiFreeturn"].then === "function"
                ) {
                  $steps["apiFreeturn"] = await $steps["apiFreeturn"];
                }

                $steps["_60"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["stateBookingProgress"]
                        },
                        operation: 0,
                        value: 60
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["_60"] != null &&
                  typeof $steps["_60"] === "object" &&
                  typeof $steps["_60"].then === "function"
                ) {
                  $steps["_60"] = await $steps["_60"];
                }

                $steps["apiBook"] =
                  $steps.apiFreeturn.data.status == 1
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://apigw.paziresh24.com/booking/v2/book",
                            undefined,
                            (() => {
                              try {
                                return {
                                  request_code:
                                    $steps.apiFreeturn.data.result.request_code,
                                  center_id: $ctx.query.center_id,
                                  server_id:
                                    $state.stateFullprofile.data.centers.find(
                                      item => item.id === $ctx.query.center_id
                                    )?.server_id,
                                  is_webview: 0,
                                  first_name: $steps.apiMe.data.users[0].name,
                                  last_name: $steps.apiMe.data.users[0].family,
                                  gender: $steps.apiMe.data.users[0].gender,
                                  cell: $steps.apiMe.data.users[0].cell,
                                  selected_user_id:
                                    $steps.apiMe.data.users[0].id,
                                  is_foreigner:
                                    $steps.apiMe.data.users[0].national_code ==
                                    ""
                                      ? true
                                      : false,
                                  national_code:
                                    $steps.apiMe.data.users[0].national_code
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["apiBook"] != null &&
                  typeof $steps["apiBook"] === "object" &&
                  typeof $steps["apiBook"].then === "function"
                ) {
                  $steps["apiBook"] = await $steps["apiBook"];
                }

                $steps["_90"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["stateBookingProgress"]
                        },
                        operation: 0,
                        value: 90
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["_90"] != null &&
                  typeof $steps["_90"] === "object" &&
                  typeof $steps["_90"].then === "function"
                ) {
                  $steps["_90"] = await $steps["_90"];
                }

                $steps["setStateBook"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["stateBook"]
                        },
                        operation: 0,
                        value: $steps.apiBook.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["setStateBook"] != null &&
                  typeof $steps["setStateBook"] === "object" &&
                  typeof $steps["setStateBook"].then === "function"
                ) {
                  $steps["setStateBook"] = await $steps["setStateBook"];
                }

                $steps["apiConsultInvoiceDetails"] =
                  $steps.apiBook.data.status == 1
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            (() => {
                              try {
                                return `https://apigw.paziresh24.com/api/consultInvoiceDetails?book_id=${$steps.apiBook.data.book_info.id}`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["apiConsultInvoiceDetails"] != null &&
                  typeof $steps["apiConsultInvoiceDetails"] === "object" &&
                  typeof $steps["apiConsultInvoiceDetails"].then === "function"
                ) {
                  $steps["apiConsultInvoiceDetails"] = await $steps[
                    "apiConsultInvoiceDetails"
                  ];
                }

                $steps["setStateConsultInvoiceDetails"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["stateConsultInvoiceDetails"]
                        },
                        operation: 0,
                        value: $steps.apiConsultInvoiceDetails.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["setStateConsultInvoiceDetails"] != null &&
                  typeof $steps["setStateConsultInvoiceDetails"] === "object" &&
                  typeof $steps["setStateConsultInvoiceDetails"].then ===
                    "function"
                ) {
                  $steps["setStateConsultInvoiceDetails"] = await $steps[
                    "setStateConsultInvoiceDetails"
                  ];
                }

                $steps["hideLoader"] =
                  $steps.apiBook.data.status == 1
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["showBookingLoader"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["hideLoader"] != null &&
                  typeof $steps["hideLoader"] === "object" &&
                  typeof $steps["hideLoader"].then === "function"
                ) {
                  $steps["hideLoader"] = await $steps["hideLoader"];
                }

                $steps["updateStateBookingProgress"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["stateBookingProgress"]
                        },
                        operation: 0,
                        value: 90
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateBookingProgress"] != null &&
                  typeof $steps["updateStateBookingProgress"] === "object" &&
                  typeof $steps["updateStateBookingProgress"].then ===
                    "function"
                ) {
                  $steps["updateStateBookingProgress"] = await $steps[
                    "updateStateBookingProgress"
                  ];
                }
              }}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__eEgsl)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dfC94)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__oOqRt)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sSht)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__wWRx7)}
                      displayHeight={"70px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"70px"}
                      height={``}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return (
                            "https://cdn.paziresh24.com" +
                            $state.stateFullprofile.data.image
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      width={``}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__mSbgA)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hpSve
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__y6Mxi
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  $state.stateFullprofile.data.name +
                                  " " +
                                  $state.stateFullprofile.data.family
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        {(() => {
                          try {
                            return $state.stateFullprofile.data.online_visit_channel_types.includes(
                              "eitaa"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <EitaaIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bXtpe
                            )}
                            role={"img"}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return $state.stateFullprofile.data.online_visit_channel_types.includes(
                              "whatsapp"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <WhatsappIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fS44H
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4YDau
                        )}
                      >
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                return (
                                  "شماره نظام پزشکی <b>" +
                                  $state.stateFullprofile.data.medical_code +
                                  "</b>" +
                                  ($state.stateFullprofile.data.experience !=
                                  undefined
                                    ? " | با <b>" +
                                      $state.stateFullprofile.data.experience +
                                      "</b> سال تجربه"
                                    : "")
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jYWuY
                        )}
                        style={{
                          display: "-webkit-inline-box",
                          WebkitBoxOrient: "vertical",
                          WebkitLineClamp: 2,
                          overflow: "hidden",
                          textOverflow: "ellipsis"
                        }}
                      >
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                return $state.stateFullprofile.data
                                  .expertises[0].alias_title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ci5Ih)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__moI01)}
                    >
                      <ApiRequest
                        data-plasmic-name={"rateApi"}
                        data-plasmic-override={overrides.rateApi}
                        className={classNames("__wab_instance", sty.rateApi)}
                        errorDisplay={null}
                        loadingDisplay={null}
                        method={"GET"}
                        onError={generateStateOnChangeProp($state, [
                          "rateApi",
                          "error"
                        ])}
                        onLoading={generateStateOnChangeProp($state, [
                          "rateApi",
                          "loading"
                        ])}
                        onSuccess={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "rateApi",
                            "data"
                          ]).apply(null, eventArgs);
                          (async data => {
                            const $steps = {};
                          }).apply(null, eventArgs);
                        }}
                        url={(() => {
                          try {
                            return (
                              "https://apigw.paziresh24.com/ravi/v1/rate?where=(doctor_slug,eq," +
                              $ctx.params.slug +
                              ")"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__r5Akd
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return Number(
                                  (
                                    ($state.rateApi.data.list[0]
                                      .doctor_encounter +
                                      $state.rateApi.data.list[0]
                                        .explanation_of_issue +
                                      $state.rateApi.data.list[0]
                                        .quality_of_treatment) /
                                    3
                                  ).toFixed(1)
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <AntdRate
                          data-plasmic-name={"rate2"}
                          data-plasmic-override={overrides.rate2}
                          allowClear={false}
                          allowHalf={true}
                          autoFocus={false}
                          className={classNames("__wab_instance", sty.rate2)}
                          defaultValue={(() => {
                            try {
                              return Number(
                                (
                                  ($state.rateApi.data.list[0]
                                    .doctor_encounter +
                                    $state.rateApi.data.list[0]
                                      .explanation_of_issue +
                                    $state.rateApi.data.list[0]
                                      .quality_of_treatment) /
                                  3
                                ).toFixed(1)
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          disabled={true}
                          multiCharacter={false}
                          onChange={generateStateOnChangeProp($state, [
                            "rate2",
                            "value"
                          ])}
                          symbols={
                            <React.Fragment>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__uuS8A
                                )}
                              >
                                {"1"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__t2Kie
                                )}
                              >
                                {"2"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jfJH
                                )}
                              >
                                {"3"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___66Zj
                                )}
                              >
                                {"4"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cqc9
                                )}
                              >
                                {"5"}
                              </div>
                            </React.Fragment>
                          }
                          value={generateStateValueProp($state, [
                            "rate2",
                            "value"
                          ])}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__u0OLb
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "(" +
                                  $state.rateApi.data.list[0].count_rates +
                                  " نظر)"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </ApiRequest>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__tmLsx)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qbyJh
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "\u0645\u0647\u0627\u0631\u062a \u0648 \u062a\u062e\u0635\u0635 \u067e\u0632\u0634\u06a9 ("
                            }
                          </React.Fragment>
                          {
                            <span
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.span__jh9VD
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return Number(
                                      $state.rateApi.data.list[0].quality_of_treatment.toFixed(
                                        1
                                      )
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "0";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </span>
                          }
                          <React.Fragment>{")"}</React.Fragment>
                        </React.Fragment>
                      </div>
                      <AntdProgress
                        className={classNames(
                          "__wab_instance",
                          sty.progress__wAvU2
                        )}
                        percent={(() => {
                          try {
                            return (
                              (Number(
                                $state.rateApi.data.list[0].quality_of_treatment
                              ) *
                                100) /
                              5
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 0;
                            }
                            throw e;
                          }
                        })()}
                        showInfo={false}
                        strokeLinecap={"round"}
                        strokeWidth={3}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sh5Ve
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "\u062a\u0648\u0636\u06cc\u062d \u067e\u0632\u0634\u06a9 \u062f\u0631 \u0647\u0646\u06af\u0627\u0645 \u0648\u06cc\u0632\u06cc\u062a ("
                            }
                          </React.Fragment>
                          {
                            <span
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.span__zNSoo
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return Number(
                                      $state.rateApi.data.list[0].explanation_of_issue.toFixed(
                                        1
                                      )
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "0";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </span>
                          }
                          <React.Fragment>{")"}</React.Fragment>
                        </React.Fragment>
                      </div>
                      <AntdProgress
                        className={classNames(
                          "__wab_instance",
                          sty.progress___2Y8SQ
                        )}
                        percent={(() => {
                          try {
                            return (
                              (Number(
                                $state.rateApi.data.list[0].explanation_of_issue
                              ) *
                                100) /
                              5
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 0;
                            }
                            throw e;
                          }
                        })()}
                        showInfo={false}
                        strokeWidth={3}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__b5ZbM
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "\u0628\u0631\u062e\u0648\u0631\u062f \u0645\u0646\u0627\u0633\u0628 \u067e\u0632\u0634\u06a9 ("
                            }
                          </React.Fragment>
                          {
                            <span
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.span___16BUc
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return Number(
                                      $state.rateApi.data.list[0].doctor_encounter.toFixed(
                                        1
                                      )
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "0";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </span>
                          }
                          <React.Fragment>{")"}</React.Fragment>
                        </React.Fragment>
                      </div>
                      <AntdProgress
                        className={classNames(
                          "__wab_instance",
                          sty.progress__lyqZm
                        )}
                        percent={(() => {
                          try {
                            return (
                              (Number(
                                $state.rateApi.data.list[0].doctor_encounter
                              ) *
                                100) /
                              5
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 93;
                            }
                            throw e;
                          }
                        })()}
                        showInfo={false}
                        strokeWidth={3}
                      />
                    </Stack__>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__yQiy2)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__e4Wgp)}
                  >
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__znKe5)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9YSpv
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"\u062a\u0627 "}</React.Fragment>
                        {
                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span___4XBej
                            )}
                          >
                            {"3 \u0631\u0648\u0632"}
                          </span>
                        }
                        <React.Fragment>
                          {"\u060c \u0627\u0632 \u0637\u0631\u06cc\u0642 "}
                        </React.Fragment>
                        {
                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span__nDh66
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.stateFullprofile.data.online_visit_channel_types.includes(
                                    "whatsapp"
                                  ) &&
                                    $state.stateFullprofile.data.online_visit_channel_types.includes(
                                      "eitaa"
                                    )
                                    ? "واتساپ یا ایتا"
                                    : $state.stateFullprofile.data.online_visit_channel_types.includes(
                                        "whatsapp"
                                      )
                                    ? "واتساپ"
                                    : "ایتا";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0648\u0627\u062a\u0633 \u0622\u067e";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </span>
                        }
                        <React.Fragment>
                          {
                            " \u0633\u0648\u0627\u0644\u0627\u062a \u062e\u0648\u062f\u062a\u0648\u0646 \u0631\u0648 \u0627\u0632 \u067e\u0632\u0634\u06a9 \u0628\u067e\u0631\u0633\u06cc\u062f"
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9Irw)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__bvPFm)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "40px"
                          : "64px"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "40px"
                          : "64px"
                      }
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/booking/images/image10.svg",
                        fullWidth: 114.648,
                        fullHeight: 114.648,
                        aspectRatio: 1
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qNWF
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span__fYlv1
                            )}
                          >
                            {
                              "\u0646\u0633\u062e\u0647 \u0622\u0646\u0644\u0627\u06cc\u0646"
                            }
                          </span>
                        }
                        <React.Fragment>
                          {
                            " \u062e\u0648\u062f\u062a\u0648\u0646 \u0631\u0648 \u0647\u0645\u0627\u0646 \u0644\u062d\u0638\u0647 \u0627\u0632 \u067e\u0632\u0634\u06a9 \u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u0646\u06cc\u062f"
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ine7H)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__efmAb)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "40px"
                          : "64px"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "40px"
                          : "64px"
                      }
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/booking/images/image11.svg",
                        fullWidth: 512,
                        fullHeight: 512,
                        aspectRatio: 1
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jo2Ch
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u062f\u0631 \u0635\u0648\u0631\u062a \u0639\u062f\u0645 \u0631\u0636\u0627\u06cc\u062a\u060c "
                          }
                        </React.Fragment>
                        {
                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span___5PlxR
                            )}
                          >
                            {
                              "\u0628\u0631\u06af\u0634\u062a \u0648\u062c\u0647"
                            }
                          </span>
                        }
                        <React.Fragment>
                          {
                            " \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0634\u0645\u0627 \u0628\u0647 \u0635\u0648\u0631\u062a \u06a9\u0627\u0645\u0644 \u0627\u0646\u062c\u0627\u0645 \u0645\u06cc \u0634\u0648\u062f"
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                </div>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox___0IpxH)}>
                <div className={classNames(projectcss.all, sty.freeBox__wUXqe)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cw9Jp
                    )}
                  >
                    {
                      "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oEe3T)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6QUC
                      )}
                    >
                      {
                        "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646:"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8HbWs
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              (
                                $state.stateConsultInvoiceDetails.result
                                  .service_price / 10
                              )
                                .toString()
                                .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                              " تومان"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  {(() => {
                    try {
                      return $state.stateDiscountCost != "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___30Dla
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yKfdT
                        )}
                      >
                        {"\u062a\u062e\u0641\u06cc\u0641:"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__piYTd
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.stateDiscountCost != ""
                                ? ($state.stateDiscountCost / 10)
                                    .toString()
                                    .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                    " تومان"
                                : "0";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nsZcy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x0E13
                      )}
                    >
                      {"\u0645\u0627\u0644\u06cc\u0627\u062a:"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___19Bgz
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.stateVatCost == ""
                              ? (
                                  $state.stateConsultInvoiceDetails.result.vat /
                                  10
                                )
                                  .toString()
                                  .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                  " تومان"
                              : ($state.stateVatCost / 10)
                                  .toString()
                                  .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                  " تومان";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bOadA)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sStSp
                      )}
                    >
                      {
                        "\u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a: "
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jvPxw
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.stateBookCost == ""
                              ? (
                                  $state.stateConsultInvoiceDetails.result
                                    .book_price / 10
                                )
                                  .toString()
                                  .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                  " تومان"
                              : ($state.stateBookCost / 10)
                                  .toString()
                                  .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                  " تومان";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  {(() => {
                    const child$Props = {
                      activeKey: generateStateValueProp($state, [
                        "accordion",
                        "activePanelId"
                      ]),
                      bordered: false,
                      className: classNames("__wab_instance", sty.accordion),
                      expandIconPosition: "end",
                      ghost: false,
                      items: (
                        <React.Fragment>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__gkLgO
                            )}
                            destroyInactivePanel={false}
                            id={1}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ejVeU
                                )}
                              >
                                {"\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641"}
                              </div>
                            }
                            showArrow={true}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___0D4UZ
                              )}
                            >
                              <TextInput
                                data-plasmic-name={"txtDiscount"}
                                data-plasmic-override={overrides.txtDiscount}
                                className={classNames(
                                  "__wab_instance",
                                  sty.txtDiscount
                                )}
                                isDisabled={(() => {
                                  try {
                                    return $state.stateDiscountToken != "";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                onChange={(...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "txtDiscount",
                                    "value"
                                  ])(
                                    (e => e.target?.value).apply(
                                      null,
                                      eventArgs
                                    )
                                  );
                                }}
                                placeholder={
                                  "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f ..."
                                }
                                value={
                                  generateStateValueProp($state, [
                                    "txtDiscount",
                                    "value"
                                  ]) ?? ""
                                }
                              />

                              <Button
                                children2={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__j30Af
                                    )}
                                  >
                                    {"\u0627\u0639\u0645\u0627\u0644"}
                                  </div>
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.button___31Tty
                                )}
                                isDisabled={(() => {
                                  try {
                                    return $state.stateDiscountToken != "";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["emptyCodeError"] =
                                    $state.txtDiscount.value == ""
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "error",
                                              "\u0644\u0637\u0641\u0627 \u06cc\u06a9 \u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u0626\u06cc\u062f!",
                                              "top-left"
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.showToast"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["emptyCodeError"] != null &&
                                    typeof $steps["emptyCodeError"] ===
                                      "object" &&
                                    typeof $steps["emptyCodeError"].then ===
                                      "function"
                                  ) {
                                    $steps["emptyCodeError"] = await $steps[
                                      "emptyCodeError"
                                    ];
                                  }

                                  $steps["inquiryCode"] =
                                    $state.txtDiscount.value != ""
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              undefined,
                                              (() => {
                                                try {
                                                  return (
                                                    "https://www.paziresh24.com/api/discount/v1/inquiry?book_id=" +
                                                    $state.stateBook.book_info
                                                      .id +
                                                    "&code=" +
                                                    $state.txtDiscount.value
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.apiRequest"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["inquiryCode"] != null &&
                                    typeof $steps["inquiryCode"] === "object" &&
                                    typeof $steps["inquiryCode"].then ===
                                      "function"
                                  ) {
                                    $steps["inquiryCode"] = await $steps[
                                      "inquiryCode"
                                    ];
                                  }

                                  $steps["setVat"] =
                                    $steps.inquiryCode.data.status == 1
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["stateVatCost"]
                                            },
                                            operation: 0,
                                            value:
                                              $steps.inquiryCode.data.result.vat
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["setVat"] != null &&
                                    typeof $steps["setVat"] === "object" &&
                                    typeof $steps["setVat"].then === "function"
                                  ) {
                                    $steps["setVat"] = await $steps["setVat"];
                                  }

                                  $steps["setDiscount"] =
                                    $steps.inquiryCode.data.status == 1
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "stateDiscountCost"
                                              ]
                                            },
                                            operation: 0,
                                            value:
                                              $steps.inquiryCode.data.result
                                                .discount_price
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["setDiscount"] != null &&
                                    typeof $steps["setDiscount"] === "object" &&
                                    typeof $steps["setDiscount"].then ===
                                      "function"
                                  ) {
                                    $steps["setDiscount"] = await $steps[
                                      "setDiscount"
                                    ];
                                  }

                                  $steps["setBookCost"] =
                                    $steps.inquiryCode.data.status == 1
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["stateBookCost"]
                                            },
                                            operation: 0,
                                            value:
                                              $steps.inquiryCode.data.result
                                                .payable_cost
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["setBookCost"] != null &&
                                    typeof $steps["setBookCost"] === "object" &&
                                    typeof $steps["setBookCost"].then ===
                                      "function"
                                  ) {
                                    $steps["setBookCost"] = await $steps[
                                      "setBookCost"
                                    ];
                                  }

                                  $steps["setDiscountToken"] =
                                    $steps.inquiryCode.data.status == 1
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "stateDiscountToken"
                                              ]
                                            },
                                            operation: 0,
                                            value:
                                              $steps.inquiryCode.data.result
                                                .token
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["setDiscountToken"] != null &&
                                    typeof $steps["setDiscountToken"] ===
                                      "object" &&
                                    typeof $steps["setDiscountToken"].then ===
                                      "function"
                                  ) {
                                    $steps["setDiscountToken"] = await $steps[
                                      "setDiscountToken"
                                    ];
                                  }

                                  $steps["discountNotFound"] =
                                    $steps.inquiryCode.data.result == undefined
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "error",
                                              "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u06cc\u0627\u0641\u062a \u0646\u0634\u062f!",
                                              "top-left"
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.showToast"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["discountNotFound"] != null &&
                                    typeof $steps["discountNotFound"] ===
                                      "object" &&
                                    typeof $steps["discountNotFound"].then ===
                                      "function"
                                  ) {
                                    $steps["discountNotFound"] = await $steps[
                                      "discountNotFound"
                                    ];
                                  }
                                }}
                                size={"compact"}
                              />
                            </Stack__>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem___6LaTi
                            )}
                            id={2}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wffVe
                                )}
                              >
                                {"Second Item"}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__onoQm
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                        </React.Fragment>
                      ),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "activePanelId",
                        ["accordion", "activePanelId"],
                        AntdAccordion_Helpers
                      ),
                      size: "small"
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "activePanelId",
                          plasmicStateName: "accordion.activePanelId"
                        }
                      ],
                      [],
                      AntdAccordion_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdAccordion
                        data-plasmic-name={"accordion"}
                        data-plasmic-override={overrides.accordion}
                        {...child$Props}
                      />
                    );
                  })()}
                  <Button
                    children2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pqz9
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.stateDiscountToken == ""
                                ? "پرداخت و آغاز گفتگو با پزشک"
                                : "آغاز گفتگو با پزشک";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u067e\u0631\u062f\u0627\u062e\u062a \u0648 \u0622\u063a\u0627\u0632 \u06af\u0641\u062a\u06af\u0648 \u0628\u0627 \u067e\u0632\u0634\u06a9";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    }
                    className={classNames("__wab_instance", sty.button___4Jris)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["showPaymentLoader"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["showPaymentLoader"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["showPaymentLoader"] != null &&
                        typeof $steps["showPaymentLoader"] === "object" &&
                        typeof $steps["showPaymentLoader"].then === "function"
                      ) {
                        $steps["showPaymentLoader"] = await $steps[
                          "showPaymentLoader"
                        ];
                      }

                      $steps["consultPayment"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://apigw.paziresh24.com/consult-payment",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      book_id: $state.stateBook.book_info.id,
                                      discount_token: $state.stateDiscountToken
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["consultPayment"] != null &&
                        typeof $steps["consultPayment"] === "object" &&
                        typeof $steps["consultPayment"].then === "function"
                      ) {
                        $steps["consultPayment"] = await $steps[
                          "consultPayment"
                        ];
                      }

                      $steps["goToPayment"] =
                        $steps.consultPayment.data.url != undefined
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return (
                                      "https://www.paziresh24.com" +
                                      $steps.consultPayment.data.url
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPayment"] != null &&
                        typeof $steps["goToPayment"] === "object" &&
                        typeof $steps["goToPayment"].then === "function"
                      ) {
                        $steps["goToPayment"] = await $steps["goToPayment"];
                      }

                      $steps["updateShowPaymentLoader"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["showPaymentLoader"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateShowPaymentLoader"] != null &&
                        typeof $steps["updateShowPaymentLoader"] === "object" &&
                        typeof $steps["updateShowPaymentLoader"].then ===
                          "function"
                      ) {
                        $steps["updateShowPaymentLoader"] = await $steps[
                          "updateShowPaymentLoader"
                        ];
                      }
                    }}
                    size={"compact"}
                  />

                  {(() => {
                    try {
                      return $state.showBookingLoader;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0C0A2
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___91Nq
                        )}
                      >
                        {
                          "\u062f\u0631 \u062d\u0627\u0644 \u06cc\u0627\u0641\u062a\u0646 \u0627\u0648\u0644\u06cc\u0646 \u0632\u0645\u0627\u0646 \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 ..."
                        }
                      </div>
                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__ewjz)}
                        role={"img"}
                      />

                      <AntdProgress
                        className={classNames(
                          "__wab_instance",
                          sty.progress__rTZk
                        )}
                        percent={(() => {
                          try {
                            return $state.stateBookingProgress;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        showInfo={false}
                        strokeWidth={5}
                      />
                    </Stack__>
                  ) : null}
                  {(() => {
                    try {
                      return $state.showPaymentLoader;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"paymentLoader"}
                      data-plasmic-override={overrides.paymentLoader}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.paymentLoader)}
                    >
                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__u8Fwz)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6H7G
                        )}
                      >
                        {
                          "\u062f\u0631 \u062d\u0627\u0644 \u0627\u0631\u0633\u0627\u0644 \u0628\u0647 \u0635\u0641\u062d\u0647 \u0628\u0627\u0646\u06a9 ..."
                        }
                      </div>
                    </Stack__>
                  ) : null}
                </div>
              </div>
            </Stack__>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "timer",
    "sideEffect",
    "rateApi",
    "rate2",
    "accordion",
    "txtDiscount",
    "paymentLoader"
  ],
  timer: ["timer"],
  sideEffect: ["sideEffect"],
  rateApi: ["rateApi", "rate2"],
  rate2: ["rate2"],
  accordion: ["accordion", "txtDiscount"],
  txtDiscount: ["txtDiscount"],
  paymentLoader: ["paymentLoader"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  timer: typeof Timer;
  sideEffect: typeof SideEffect;
  rateApi: typeof ApiRequest;
  rate2: typeof AntdRate;
  accordion: typeof AntdAccordion;
  txtDiscount: typeof TextInput;
  paymentLoader: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBooking__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBooking__VariantsArgs;
    args?: PlasmicBooking__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBooking__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBooking__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBooking__ArgProps,
          internalVariantPropNames: PlasmicBooking__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBooking__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBooking";
  } else {
    func.displayName = `PlasmicBooking.${nodeName}`;
  }
  return func;
}

export const PlasmicBooking = Object.assign(
  // Top-level PlasmicBooking renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    timer: makeNodeComponent("timer"),
    sideEffect: makeNodeComponent("sideEffect"),
    rateApi: makeNodeComponent("rateApi"),
    rate2: makeNodeComponent("rate2"),
    accordion: makeNodeComponent("accordion"),
    txtDiscount: makeNodeComponent("txtDiscount"),
    paymentLoader: makeNodeComponent("paymentLoader"),

    // Metadata about props expected for PlasmicBooking
    internalVariantProps: PlasmicBooking__VariantProps,
    internalArgProps: PlasmicBooking__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBooking;
/* prettier-ignore-end */

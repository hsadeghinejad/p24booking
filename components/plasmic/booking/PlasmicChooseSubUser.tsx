// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w8Roqs5CeKXUVajBnjnyHA
// Component: lj052EBNJq5u

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: 9xgScCI5_Ujn/codeComponent
import SubUserCard from "../../SubUserCard"; // plasmic-import: D8nfHqzg7emF/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: w8Roqs5CeKXUVajBnjnyHA/projectcss
import sty from "./PlasmicChooseSubUser.module.css"; // plasmic-import: lj052EBNJq5u/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: iQMfo1a3dZrA/icon

createPlasmicElementProxy;

export type PlasmicChooseSubUser__VariantMembers = {};
export type PlasmicChooseSubUser__VariantsArgs = {};
type VariantPropType = keyof PlasmicChooseSubUser__VariantsArgs;
export const PlasmicChooseSubUser__VariantProps = new Array<VariantPropType>();

export type PlasmicChooseSubUser__ArgsType = {
  onWhatsapClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicChooseSubUser__ArgsType;
export const PlasmicChooseSubUser__ArgProps = new Array<ArgPropType>(
  "onWhatsapClick"
);

export type PlasmicChooseSubUser__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  apiSubusers?: Flex__<typeof ApiRequest>;
  subUserCard?: Flex__<typeof SubUserCard>;
  apiMe?: Flex__<typeof ApiRequest>;
  apiProvider?: Flex__<typeof ApiRequest>;
  apiFullprofile?: Flex__<typeof ApiRequest>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultChooseSubUserProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicChooseSubUser__RenderFunc(props: {
  variants: PlasmicChooseSubUser__VariantsArgs;
  args: PlasmicChooseSubUser__ArgsType;
  overrides: PlasmicChooseSubUser__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectedUser",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "apiProvider.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiProvider.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiProvider.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiFullprofile.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiFullprofile.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiFullprofile.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "doctorName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "apiMe.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiMe.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiMe.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiSubusers.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiSubusers.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiSubusers.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "messenger",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "displayLoader",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ykk7F)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__kjzf4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___51ZWl
                )}
              >
                {
                  "\u0628\u0631\u0627\u06cc \u062f\u0631\u0645\u0627\u0646 \u0686\u0647 \u0628\u06cc\u0645\u0627\u0631\u06cc \u0628\u0647 \u067e\u0632\u0634\u06a9 \u0645\u0631\u0627\u062c\u0639\u0647 \u0645\u06cc\u200c\u06a9\u0646\u06cc\u062f\u061f"
                }
              </div>
              <PlasmicLink__
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link
                )}
                component={Link}
                href={"https://www.plasmic.app/"}
                platform={"nextjs"}
              >
                {
                  "\u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0646\u0627\u0645 \u0628\u06cc\u0645\u0627\u0631\u06cc"
                }
              </PlasmicLink__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ktruz
                )}
              >
                {
                  "\u0644\u0637\u0641\u0627 \u0628\u06cc\u0645\u0627\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
                }
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zVLH)}
              >
                <ApiRequest
                  data-plasmic-name={"apiSubusers"}
                  data-plasmic-override={overrides.apiSubusers}
                  className={classNames("__wab_instance", sty.apiSubusers)}
                  errorDisplay={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iGkp6
                      )}
                    >
                      {"Error fetching data"}
                    </div>
                  }
                  loadingDisplay={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uBhjI
                      )}
                    >
                      {"Loading..."}
                    </div>
                  }
                  method={"GET"}
                  onError={generateStateOnChangeProp($state, [
                    "apiSubusers",
                    "error"
                  ])}
                  onLoading={generateStateOnChangeProp($state, [
                    "apiSubusers",
                    "loading"
                  ])}
                  onSuccess={generateStateOnChangeProp($state, [
                    "apiSubusers",
                    "data"
                  ])}
                  url={"https://apigw.paziresh24.com/api/listSubUser"}
                >
                  {(() => {
                    try {
                      return $state.displayLoader;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__moDkr)}
                    >
                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__hu7W2)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [
                          $state.apiMe.data.users[0],
                          ...$state.apiSubusers.data.result
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <SubUserCard
                        data-plasmic-name={"subUserCard"}
                        data-plasmic-override={overrides.subUserCard}
                        className={classNames(
                          "__wab_instance",
                          sty.subUserCard
                        )}
                        key={currentIndex}
                        onBook={async messenger => {
                          const $steps = {};

                          $steps["displayLoader"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["displayLoader"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["displayLoader"] != null &&
                            typeof $steps["displayLoader"] === "object" &&
                            typeof $steps["displayLoader"].then === "function"
                          ) {
                            $steps["displayLoader"] = await $steps[
                              "displayLoader"
                            ];
                          }

                          $steps["freeturn"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://apigw.paziresh24.com/booking/v2/getFreeTurn",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          center_id: $ctx.query.centerId,
                                          service_id: $ctx.query.serviceId,
                                          user_center_id:
                                            $state.apiFullprofile.data.data.centers.find(
                                              item =>
                                                item.id === $ctx.query.centerId
                                            )?.user_center_id,
                                          type: "web",
                                          terminal_id: ""
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["freeturn"] != null &&
                            typeof $steps["freeturn"] === "object" &&
                            typeof $steps["freeturn"].then === "function"
                          ) {
                            $steps["freeturn"] = await $steps["freeturn"];
                          }

                          $steps["book"] =
                            $steps.freeturn.data.result.request_code !=
                            undefined
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://apigw.paziresh24.com/booking/v2/book",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            request_code:
                                              $steps.freeturn.data.result
                                                .request_code,
                                            center_id: $ctx.query.centerId,
                                            server_id:
                                              $state.apiFullprofile.data.data.centers.find(
                                                item =>
                                                  item.id ===
                                                  $ctx.query.centerId
                                              )?.server_id,
                                            is_webview: 0,
                                            first_name:
                                              $state.selectedUser.name,
                                            last_name:
                                              $state.selectedUser.family,
                                            gender: $state.selectedUser.gender,
                                            cell: $state.selectedUser.cell,
                                            selected_user_id:
                                              $state.apiMe.data.users[0].id,
                                            is_foreigner:
                                              $state.selectedUser
                                                .national_code == ""
                                                ? true
                                                : false,
                                            online_channel: messenger,
                                            national_code:
                                              $state.selectedUser.national_code
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["book"] != null &&
                            typeof $steps["book"] === "object" &&
                            typeof $steps["book"].then === "function"
                          ) {
                            $steps["book"] = await $steps["book"];
                          }

                          $steps["freeturnFailed"] =
                            $steps.freeturn.data.result.request_code ==
                            undefined
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      "\u062b\u0628\u062a \u0646\u0648\u0628\u062a \u0628\u0627 \u062e\u0637\u0627 \u0645\u0648\u0627\u062c\u0647 \u0634\u062f!"
                                    ]
                                  };
                                  return $globalActions[
                                    "plasmic-antd5-config-provider.showNotification"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["freeturnFailed"] != null &&
                            typeof $steps["freeturnFailed"] === "object" &&
                            typeof $steps["freeturnFailed"].then === "function"
                          ) {
                            $steps["freeturnFailed"] = await $steps[
                              "freeturnFailed"
                            ];
                          }

                          $steps["goToPage"] =
                            $steps.book.data.book_info.id != undefined
                              ? (() => {
                                  const actionArgs = {
                                    destination: (() => {
                                      try {
                                        return (
                                          "https://www.paziresh24.com/factor/" +
                                          $ctx.query.centerId +
                                          "/" +
                                          $steps.book.data.book_info.id
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }

                          $steps["bookingFailed"] =
                            $steps.book.data.book_info.id == undefined
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      "\u062b\u0628\u062a \u0646\u0648\u0628\u062a \u0628\u0627 \u062e\u0637\u0627 \u0645\u0648\u0627\u062c\u0647 \u0634\u062f!"
                                    ]
                                  };
                                  return $globalActions[
                                    "plasmic-antd5-config-provider.showNotification"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["bookingFailed"] != null &&
                            typeof $steps["bookingFailed"] === "object" &&
                            typeof $steps["bookingFailed"].then === "function"
                          ) {
                            $steps["bookingFailed"] = await $steps[
                              "bookingFailed"
                            ];
                          }

                          $steps["hideLoader"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["displayLoader"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["hideLoader"] != null &&
                            typeof $steps["hideLoader"] === "object" &&
                            typeof $steps["hideLoader"].then === "function"
                          ) {
                            $steps["hideLoader"] = await $steps["hideLoader"];
                          }
                        }}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateSelectedUser"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["selectedUser"]
                                  },
                                  operation: 0,
                                  value: currentItem
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSelectedUser"] != null &&
                            typeof $steps["updateSelectedUser"] === "object" &&
                            typeof $steps["updateSelectedUser"].then ===
                              "function"
                          ) {
                            $steps["updateSelectedUser"] = await $steps[
                              "updateSelectedUser"
                            ];
                          }
                        }}
                        selected={(() => {
                          try {
                            return currentItem.id == $state.selectedUser.id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        subUser={(() => {
                          try {
                            return currentItem;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </ApiRequest>
              </Stack__>
              <ApiRequest
                data-plasmic-name={"apiMe"}
                data-plasmic-override={overrides.apiMe}
                children={null}
                className={classNames("__wab_instance", sty.apiMe)}
                errorDisplay={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dpmF)}
                  >
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg___4Zw2F)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ph4Xp
                      )}
                    >
                      {
                        "\u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u062e\u0637\u0627 \u0645\u0648\u0627\u062c\u0647 \u0634\u062f!"
                      }
                    </div>
                  </Stack__>
                }
                loadingDisplay={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__afEvn)}
                  >
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__faTzA)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uBiup
                      )}
                    >
                      {
                        "\u062f\u0631 \u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a ..."
                      }
                    </div>
                  </Stack__>
                }
                method={"GET"}
                onError={generateStateOnChangeProp($state, ["apiMe", "error"])}
                onLoading={generateStateOnChangeProp($state, [
                  "apiMe",
                  "loading"
                ])}
                onSuccess={generateStateOnChangeProp($state, ["apiMe", "data"])}
                url={"https://apigw.paziresh24.com/v1/auth/me"}
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___5PnKg)}
            >
              <ApiRequest
                data-plasmic-name={"apiProvider"}
                data-plasmic-override={overrides.apiProvider}
                className={classNames("__wab_instance", sty.apiProvider)}
                errorDisplay={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__q4Zn9)}
                  >
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__ss7Rn)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fjRzd
                      )}
                    >
                      {
                        "\u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u062e\u0637\u0627 \u0645\u0648\u0627\u062c\u0647 \u0634\u062f!"
                      }
                    </div>
                  </Stack__>
                }
                loadingDisplay={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yyL7E)}
                  >
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__m1Dlb)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m8TD1
                      )}
                    >
                      {
                        "\u062f\u0631 \u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a ..."
                      }
                    </div>
                  </Stack__>
                }
                method={"GET"}
                onError={generateStateOnChangeProp($state, [
                  "apiProvider",
                  "error"
                ])}
                onLoading={generateStateOnChangeProp($state, [
                  "apiProvider",
                  "loading"
                ])}
                onSuccess={generateStateOnChangeProp($state, [
                  "apiProvider",
                  "data"
                ])}
                params={(() => {
                  try {
                    return {
                      slug: $ctx.params.slug
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                url={"https://apigw.paziresh24.com/v1/providers"}
              >
                <ApiRequest
                  data-plasmic-name={"apiFullprofile"}
                  data-plasmic-override={overrides.apiFullprofile}
                  className={classNames("__wab_instance", sty.apiFullprofile)}
                  errorDisplay={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__bxeQg)}
                    >
                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg___2RSU)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7Z7HB
                        )}
                      >
                        {
                          "\u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u062e\u0637\u0627 \u0645\u0648\u0627\u062c\u0647 \u0634\u062f!"
                        }
                      </div>
                    </Stack__>
                  }
                  loadingDisplay={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__h1Pm3)}
                    >
                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__e3CtQ)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pSfc
                        )}
                      >
                        {
                          "\u062f\u0631 \u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a ..."
                        }
                      </div>
                    </Stack__>
                  }
                  method={"GET"}
                  onError={generateStateOnChangeProp($state, [
                    "apiFullprofile",
                    "error"
                  ])}
                  onLoading={generateStateOnChangeProp($state, [
                    "apiFullprofile",
                    "loading"
                  ])}
                  onSuccess={generateStateOnChangeProp($state, [
                    "apiFullprofile",
                    "data"
                  ])}
                  url={(() => {
                    try {
                      return (
                        "https://api.paziresh24.com/doctor/v1/full-profile/" +
                        $ctx.params.slug
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ieS3)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      height={"70px"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return (
                            "https://cdn.paziresh24.com" +
                            $state.apiFullprofile.data.data.image
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      width={"70px"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___83Guj
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rFbzc
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $state.apiFullprofile.data.data.name +
                                $state.apiFullprofile.data.data.family
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "-";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qXxhu
                        )}
                        style={{
                          display: "-webkit-inline-box",
                          WebkitBoxOrient: "vertical",
                          WebkitLineClamp: 2,
                          overflow: "hidden",
                          textOverflow: "ellipsis"
                        }}
                      >
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                return $state.apiFullprofile.data.data
                                  .expertises[0].alias_title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__aojDe)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dkA0S
                      )}
                    >
                      {"\u062e\u062f\u0645\u062a"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__e3HjX
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $ctx.query.centerId == "5532"
                              ? "ویزیت آنلاین در پیام رسان"
                              : "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </ApiRequest>
              </ApiRequest>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "link",
    "apiSubusers",
    "subUserCard",
    "apiMe",
    "apiProvider",
    "apiFullprofile",
    "img"
  ],
  link: ["link"],
  apiSubusers: ["apiSubusers", "subUserCard"],
  subUserCard: ["subUserCard"],
  apiMe: ["apiMe"],
  apiProvider: ["apiProvider", "apiFullprofile", "img"],
  apiFullprofile: ["apiFullprofile", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  apiSubusers: typeof ApiRequest;
  subUserCard: typeof SubUserCard;
  apiMe: typeof ApiRequest;
  apiProvider: typeof ApiRequest;
  apiFullprofile: typeof ApiRequest;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChooseSubUser__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChooseSubUser__VariantsArgs;
    args?: PlasmicChooseSubUser__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChooseSubUser__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicChooseSubUser__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChooseSubUser__ArgProps,
          internalVariantPropNames: PlasmicChooseSubUser__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChooseSubUser__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChooseSubUser";
  } else {
    func.displayName = `PlasmicChooseSubUser.${nodeName}`;
  }
  return func;
}

export const PlasmicChooseSubUser = Object.assign(
  // Top-level PlasmicChooseSubUser renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    apiSubusers: makeNodeComponent("apiSubusers"),
    subUserCard: makeNodeComponent("subUserCard"),
    apiMe: makeNodeComponent("apiMe"),
    apiProvider: makeNodeComponent("apiProvider"),
    apiFullprofile: makeNodeComponent("apiFullprofile"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicChooseSubUser
    internalVariantProps: PlasmicChooseSubUser__VariantProps,
    internalArgProps: PlasmicChooseSubUser__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicChooseSubUser;
/* prettier-ignore-end */

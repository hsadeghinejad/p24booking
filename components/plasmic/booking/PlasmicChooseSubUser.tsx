// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w8Roqs5CeKXUVajBnjnyHA
// Component: lj052EBNJq5u

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: w8Roqs5CeKXUVajBnjnyHA/projectcss
import sty from "./PlasmicChooseSubUser.module.css"; // plasmic-import: lj052EBNJq5u/css

createPlasmicElementProxy;

export type PlasmicChooseSubUser__VariantMembers = {};
export type PlasmicChooseSubUser__VariantsArgs = {};
type VariantPropType = keyof PlasmicChooseSubUser__VariantsArgs;
export const PlasmicChooseSubUser__VariantProps = new Array<VariantPropType>();

export type PlasmicChooseSubUser__ArgsType = {};
type ArgPropType = keyof PlasmicChooseSubUser__ArgsType;
export const PlasmicChooseSubUser__ArgProps = new Array<ArgPropType>();

export type PlasmicChooseSubUser__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultChooseSubUserProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicChooseSubUser__RenderFunc(props: {
  variants: PlasmicChooseSubUser__VariantsArgs;
  args: PlasmicChooseSubUser__ArgsType;
  overrides: PlasmicChooseSubUser__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getProvider: usePlasmicDataOp(() => {
      return {
        sourceId: "dwRpiZ4ps16vVTymKfLgsP",
        opId: "34c11d5b-3f59-4668-89d6-304ce48ab4d5",
        userArgs: {
          params: [$ctx.params.slug]
        },
        cacheKey: `plasmic.$.34c11d5b-3f59-4668-89d6-304ce48ab4d5.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getUser: usePlasmicDataOp(() => {
      return {
        sourceId: "6emrXfoqY758i2nH1qMcUw",
        opId: "75d35a00-c400-4ce9-9e6a-32530c43d974",
        userArgs: {
          path: [$queries.getProvider.data.response.providers[0].user_id]
        },
        cacheKey: `plasmic.$.75d35a00-c400-4ce9-9e6a-32530c43d974.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fullProfile: usePlasmicDataOp(() => {
      return {
        sourceId: "rodmh4XGXNtJjgPegvnXiU",
        opId: "fe23ae84-bb3a-478b-84f4-2778e795548f",
        userArgs: {
          path: [$ctx.params.slug]
        },
        cacheKey: `plasmic.$.fe23ae84-bb3a-478b-84f4-2778e795548f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ykk7F)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__kjzf4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___51ZWl
                )}
              >
                {
                  "\u0628\u0631\u0627\u06cc \u062f\u0631\u0645\u0627\u0646 \u0686\u0647 \u0628\u06cc\u0645\u0627\u0631\u06cc \u0628\u0647 \u067e\u0632\u0634\u06a9 \u0645\u0631\u0627\u062c\u0639\u0647 \u0645\u06cc\u200c\u06a9\u0646\u06cc\u062f\u061f"
                }
              </div>
              <PlasmicLink__
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link
                )}
                component={Link}
                href={"https://www.plasmic.app/"}
                platform={"nextjs"}
              >
                {
                  "\u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 \u0646\u0627\u0645 \u0628\u06cc\u0645\u0627\u0631\u06cc"
                }
              </PlasmicLink__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ktruz
                )}
              >
                {
                  "\u0644\u0637\u0641\u0627 \u0628\u06cc\u0645\u0627\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
                }
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___5PnKg)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ieS3)}>
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  height={"70px"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return (
                        "https://apigw.paziresh24.com/v1/rokhnama/image?slug=" +
                        $ctx.params.slug
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  width={"70px"}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox___83Guj)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rFbzc
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $queries.getUser.data.response.users[0].name +
                            " " +
                            $queries.getUser.data.response.users[0].family
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qXxhu
                    )}
                    style={{
                      display: "-webkit-inline-box",
                      WebkitBoxOrient: "vertical",
                      WebkitLineClamp: 2,
                      overflow: "hidden",
                      textOverflow: "ellipsis"
                    }}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return $queries.fullProfile.data.response.data
                              .expertises[0].alias_title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__aojDe)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dkA0S
                  )}
                >
                  {"\u062e\u062f\u0645\u062a"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e3HjX
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.query.centerId == "5532"
                          ? "ویزیت آنلاین در پیام رسان"
                          : "";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "img"],
  link: ["link"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChooseSubUser__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChooseSubUser__VariantsArgs;
    args?: PlasmicChooseSubUser__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChooseSubUser__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicChooseSubUser__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChooseSubUser__ArgProps,
          internalVariantPropNames: PlasmicChooseSubUser__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChooseSubUser__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChooseSubUser";
  } else {
    func.displayName = `PlasmicChooseSubUser.${nodeName}`;
  }
  return func;
}

export const PlasmicChooseSubUser = Object.assign(
  // Top-level PlasmicChooseSubUser renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicChooseSubUser
    internalVariantProps: PlasmicChooseSubUser__VariantProps,
    internalArgProps: PlasmicChooseSubUser__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicChooseSubUser;
/* prettier-ignore-end */

// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w8Roqs5CeKXUVajBnjnyHA
// Component: 20zB4NhmWaQs

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: w8Roqs5CeKXUVajBnjnyHA/projectcss
import sty from "./PlasmicBookingCard.module.css"; // plasmic-import: 20zB4NhmWaQs/css

import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicBookingCard__VariantMembers = {};
export type PlasmicBookingCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicBookingCard__VariantsArgs;
export const PlasmicBookingCard__VariantProps = new Array<VariantPropType>();

export type PlasmicBookingCard__ArgsType = {
  providerId?: string;
  centerId?: string;
  serviceId?: string;
};
type ArgPropType = keyof PlasmicBookingCard__ArgsType;
export const PlasmicBookingCard__ArgProps = new Array<ArgPropType>(
  "providerId",
  "centerId",
  "serviceId"
);

export type PlasmicBookingCard__OverridesType = {
  root?: Flex__<"div">;
  نوبتانترنتومراجعهحضور?: Flex__<"div">;
  text?: Flex__<"div">;
  درافتنوبت?: Flex__<typeof Button>;
  getAvailabilityStatus?: Flex__<typeof DataFetcher>;
};

export interface DefaultBookingCardProps {
  providerId?: string;
  centerId?: string;
  serviceId?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBookingCard__RenderFunc(props: {
  variants: PlasmicBookingCard__VariantsArgs;
  args: PlasmicBookingCard__ArgsType;
  overrides: PlasmicBookingCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={
          "\u0646\u0648\u0628\u062a\u0627\u0646\u062a\u0631\u0646\u062a\u0648\u0645\u0631\u0627\u062c\u0639\u0647\u062d\u0636\u0648\u0631"
        }
        data-plasmic-override={overrides.نوبتانترنتومراجعهحضور}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.نوبتانترنتومراجعهحضور
        )}
      >
        {
          "\u0646\u0648\u0628\u062a \u0627\u06cc\u0646\u062a\u0631\u0646\u062a\u06cc \u0648 \u0645\u0631\u0627\u062c\u0639\u0647 \u062d\u0636\u0648\u0631\u06cc"
        }
      </div>
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {
          "\u0627\u0645\u06a9\u0627\u0646 \u062f\u0631\u06cc\u0627\u0641\u062a \u0632\u0648\u062f\u062a\u0631\u06cc\u0646 \u0646\u0648\u0628\u062a"
        }
      </div>
      <Button
        data-plasmic-name={
          "\u062f\u0631\u0627\u0641\u062a\u0646\u0648\u0628\u062a"
        }
        data-plasmic-override={overrides.درافتنوبت}
        children2={
          "\u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u0628\u062a"
        }
        className={classNames("__wab_instance", sty.درافتنوبت)}
        startIcon={null}
      />

      <DataFetcher
        data-plasmic-name={"getAvailabilityStatus"}
        data-plasmic-override={overrides.getAvailabilityStatus}
        className={classNames("__wab_instance", sty.getAvailabilityStatus)}
        dataName={"fetchedData"}
        errorDisplay={
          <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
        }
        errorName={"fetchError"}
        headers={{
          "Content-Type": "application/json",
          Accept: "application/json"
        }}
        loadingDisplay={
          <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
        }
        method={"GET"}
        noLayout={false}
        url={"https://apigw.paziresh24.com/core-booking/v1/first-availability"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "\u0646\u0648\u0628\u062a\u0627\u0646\u062a\u0631\u0646\u062a\u0648\u0645\u0631\u0627\u062c\u0639\u0647\u062d\u0636\u0648\u0631",
    "text",
    "\u062f\u0631\u0627\u0641\u062a\u0646\u0648\u0628\u062a",
    "getAvailabilityStatus"
  ],
  نوبتانترنتومراجعهحضور: [
    "\u0646\u0648\u0628\u062a\u0627\u0646\u062a\u0631\u0646\u062a\u0648\u0645\u0631\u0627\u062c\u0639\u0647\u062d\u0636\u0648\u0631"
  ],
  text: ["text"],
  درافتنوبت: ["\u062f\u0631\u0627\u0641\u062a\u0646\u0648\u0628\u062a"],
  getAvailabilityStatus: ["getAvailabilityStatus"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  نوبتانترنتومراجعهحضور: "div";
  text: "div";
  درافتنوبت: typeof Button;
  getAvailabilityStatus: typeof DataFetcher;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBookingCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBookingCard__VariantsArgs;
    args?: PlasmicBookingCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBookingCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBookingCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBookingCard__ArgProps,
          internalVariantPropNames: PlasmicBookingCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBookingCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookingCard";
  } else {
    func.displayName = `PlasmicBookingCard.${nodeName}`;
  }
  return func;
}

export const PlasmicBookingCard = Object.assign(
  // Top-level PlasmicBookingCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    نوبتانترنتومراجعهحضور: makeNodeComponent(
      "\u0646\u0648\u0628\u062a\u0627\u0646\u062a\u0631\u0646\u062a\u0648\u0645\u0631\u0627\u062c\u0639\u0647\u062d\u0636\u0648\u0631"
    ),
    text: makeNodeComponent("text"),
    درافتنوبت: makeNodeComponent(
      "\u062f\u0631\u0627\u0641\u062a\u0646\u0648\u0628\u062a"
    ),
    getAvailabilityStatus: makeNodeComponent("getAvailabilityStatus"),

    // Metadata about props expected for PlasmicBookingCard
    internalVariantProps: PlasmicBookingCard__VariantProps,
    internalArgProps: PlasmicBookingCard__ArgProps
  }
);

export default PlasmicBookingCard;
/* prettier-ignore-end */
